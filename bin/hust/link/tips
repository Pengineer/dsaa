返回两个链表的第一个交点。

1，若无环，则从相交处开始后面的元素都是重叠的；

2，若有环，有三种情况：
    \ /    \ /      \
     |      O        O
     O              /
     
思路：
1，首先F1函数分别获取两个链表入环的第一个结点node1和node2；
2，如果node1=node2=null，即表示两个链表均无环，使用F2函数获取两个无环链表的第一个相交结点；
3，如果node1=null，node2!=null，不可能有交点，直接返回null；
4，如果node1!=node2 && node1!=null && node2!=null，就是上图的第三种情况，返回node1或则node2均可（很难说谁是第一个相交结点）
5，如果node1=node2!=null，那么就可能是上图中的前两种情况，变向利用F2函数，将入环的结点设置成链表的终点，求第一个交点，如果等于node1，则是图二，否则是图一。

这是整个过程，还是比较复杂的，额外空间复杂度为O(1)，一般考试会拆开，给出两链表是否有环，或则问面试官也可以。

（hash表实现额外空间复杂度是O(n)）